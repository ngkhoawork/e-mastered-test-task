{"version":3,"sources":["utils/index.js","api/FileApi.js","utils/lame.js","components/ConfirmationModal/index.jsx","components/FileList/index.jsx","components/FileUploader/index.jsx","pages/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","getFiles","Promise","resolve","setTimeout","filesStr","localStorage","getItem","files","JSON","parse","map","f","data","undefined","downloadFile","fileId","reject","file","find","index","id","audioCtx","AudioContext","audioData","base64","binary_string","atob","length","charCodeAt","base64ToArrayBuffer","decodeAudioData","audioBuffer","filename","ext","stamp","duration","channels","numberOfChannels","buffers","min","max","Array","apply","v","channelId","getChannelData","dataAsInt16Array","Int16Array","convert","n","Math","sampleRate","serializeAudioBuffer","start","end","newBuffer","createBuffer","copyToChannel","slice","sliceAudioBuffer","url","name","link","document","createElement","href","download","click","samples","mp3encoder","lamejs","Mp3Encoder","mp3Data","leftChunk","subarray","rightChunk","mp3buf","encodeBuffer","push","flush","blob","Blob","type","URL","createObjectURL","encodeStereo","replace","e","console","log","err","Error","deleteFile","newFiles","_","filter","setItem","stringify","success","show","title","message","handleClose","handleSubmit","Modal","onHide","animation","data-testid","Header","closeButton","Title","Body","Footer","Button","variant","onClick","FileList","this","props","isLoading","Table","striped","bordered","hover","size","responsive","colSpan","align","key","toFixed","Date","created","toDateString","className","onDownload","onDelete","PureComponent","FileUploader","useState","isUploading","setIsUploading","onDrop","useCallback","acceptedFiles","uploadPromises","reader","FileReader","onload","result","onerror","readAsArrayBuffer","readFileAsync","then","uploadFile","random","toString","substr","now","all","response","catch","useDropzone","accept","getRootProps","getInputProps","isDragActive","HomePage","state","audioFiles","isShowConfirmationModal","currentFileId","loadFiles","setState","showModal","closeModal","handleUpload","handleDownload","handleDelete","Container","Row","Col","sm","ConfirmationModal","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ff27bf25.chunk.js","sourcesContent":["export const generateID = () => {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n\n/**\n * create range [min .. max]\n */\nexport const range = (min, max) =>\n  Array\n    .apply(null, { length: max - min + 1 })\n    .map((v, i) => i + min)\n\n/**\n * decode arrayBuffer of audio file to AudioBuffer\n * @param {ArrayBuffer} arrayBuffer\n * @return {Promise<AudioBuffer>}\n * @deprecated use AudioContext.decodeAudioData directly\n */\nexport const decodeAudioArrayBuffer = (arrayBuffer) => {\n  return new AudioContext().decodeAudioData(arrayBuffer)\n}\n\n/**\n * slice AudioBuffer from start byte to end byte\n * @param {AudioBuffer} audioBuffer\n * @return {AudioBuffer}\n */\nexport const sliceAudioBuffer = (audioBuffer, start = 0, end = audioBuffer.length) => {\n  const newBuffer = new AudioContext().createBuffer(\n    audioBuffer.numberOfChannels,\n    end - start,\n    audioBuffer.sampleRate\n  )\n\n  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {\n    newBuffer.copyToChannel(audioBuffer.getChannelData(i).slice(start, end), i)\n  }\n\n  return newBuffer\n}\n\n/**\n * serialize AudioBuffer for message send\n * @param {AudioBuffer} audioBuffer\n */\nexport const serializeAudioBuffer = (audioBuffer) => {\n  return {\n    channels: audioBuffer.numberOfChannels,\n    buffers: range(0, audioBuffer.numberOfChannels - 1)\n      .map(channelId => {\n        const data = audioBuffer.getChannelData(channelId);\n        let len = data.length, i = 0;\n        let dataAsInt16Array = new Int16Array(len);\n\n        while(i < len){\n            dataAsInt16Array[i] = convert(data[i++]);\n        }\n        function convert(n) {\n            let v = n < 0 ? n * 32768 : n * 32767;       // convert in range [-32768, 32767]\n            return Math.max(-32768, Math.min(32768, v)); // clamp\n        }\n        return dataAsInt16Array;\n      }),\n    sampleRate: audioBuffer.sampleRate,\n    length: audioBuffer.length,\n  }\n}\n\nexport const arrayBufferToBase64 = (buffer) => {\n  let binary = '';\n  const bytes = new Uint8Array( buffer );\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode( bytes[ i ] );\n  }\n  return window.btoa( binary );\n}\n\nexport const base64ToArrayBuffer = (base64) => {\n  const binary_string =  window.atob(base64);\n  const len = binary_string.length;\n  let bytes = new Uint8Array( len );\n  for (let i = 0; i < len; i++)        {\n      bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n\nexport const download = (url, name) => {\n  const link = document.createElement('a')\n  link.href = url\n  link.download = name\n  link.click()\n}\n\nexport const rename = (filename, ext, stamp) =>\n  `${filename.replace(/\\.\\w+$/, '')}${stamp || ''}.${ext}`\n","import _ from 'lodash'\n\nimport { sliceAudioBuffer, serializeAudioBuffer, base64ToArrayBuffer, download, rename } from '../utils'\nimport { encodeStereo } from '../utils/lame'\n\nconst FILE_LIST_KEY = 'audioFiles'\nconst getFiles = () => {\n  return new Promise((resolve) => {\n    // simulating downloading time...\n    setTimeout(() => {\n      const filesStr = localStorage.getItem(FILE_LIST_KEY)\n      if (filesStr) {\n        const files = JSON.parse(filesStr)\n        resolve(files.map(f => ({\n          ...f,\n          data: undefined,\n        })))\n      } else {\n        resolve([])\n      }\n    }, 1500)\n  })\n}\n\nconst uploadFile = file => {\n  return new Promise((resolve) => {\n    const filesStr = localStorage.getItem(FILE_LIST_KEY)\n    let files = []\n    if (filesStr) {\n      files = JSON.parse(filesStr)\n    }\n\n    files.push(file)\n    localStorage.setItem(FILE_LIST_KEY, JSON.stringify(files))\n\n    resolve({ success: true, fileId: file.id })\n  })\n}\n\nconst downloadFile = fileId => {\n  return new Promise((resolve, reject) => {\n    const filesStr = localStorage.getItem(FILE_LIST_KEY)\n    let files = []\n    if (filesStr) {\n      files = JSON.parse(filesStr)\n    }\n\n    const file = files.find((f, index) => f.id === fileId )\n    if (file) {\n\n      \n      // var fileReader  = new FileReader();\n\n      // fileReader.onload  = function(event) {\n        const audioCtx = new AudioContext()\n        const audioData = base64ToArrayBuffer(file.data);\n        audioCtx.decodeAudioData(\n          audioData,\n          function(audioBuffer) {\n            const { length, duration } = audioBuffer\n\n            const audioSliced = sliceAudioBuffer(\n              audioBuffer,\n              ~~(length * 0 / duration),\n              ~~(length * 5 / duration),\n            )\n            const audioData = serializeAudioBuffer(audioSliced)\n            const blobUrl = encodeStereo(audioData.channels, audioData.sampleRate, audioData.buffers)\n            download(blobUrl, rename(`mastered-${file.name}`, 'mp3'))\n          },\n          function(e){ \n            console.log(\"Error with decoding audio data\" + e.err)\n          }\n        );\n\n        \n      // };\n      // fileReader.readAsArrayBuffer(new Blob(file.data));\n\n      // resolve(file)\n    }\n    else {\n      reject(new Error('Invalid file id'))\n    }\n  })\n}\n\nconst deleteFile = fileId => {\n  return new Promise((resolve, reject) => {\n    try {\n      const filesStr = localStorage.getItem(FILE_LIST_KEY)\n      let files = []\n      if (filesStr) {\n        files = JSON.parse(filesStr)\n      }\n      let newFiles = _.filter(files, f => f.id !== fileId)\n        localStorage.setItem(FILE_LIST_KEY, JSON.stringify(newFiles))\n      resolve({ success: true, fileId })\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n\nexport {\n  getFiles,\n  uploadFile,\n  downloadFile,\n  deleteFile,\n}\n","import lamejs from 'lamejs'\n\nexport function encodeStereo(channels, sampleRate, samples) {\n  const mp3encoder = new lamejs.Mp3Encoder(channels, sampleRate, 128);\n  var mp3Data = [];\n  \n  const sampleBlockSize = 1152; //can be anything but make it a multiple of 576 to make encoders life easier\n  \n  for (var i = 0; i < samples[0].length; i += sampleBlockSize) {\n    const leftChunk = samples[0].subarray(i, i + sampleBlockSize);\n    const rightChunk = samples[1].subarray(i, i + sampleBlockSize);\n    const mp3buf = mp3encoder.encodeBuffer(leftChunk, rightChunk);\n    if (mp3buf.length > 0) {\n      mp3Data.push(mp3buf);\n    }\n  }\n  let mp3buf = mp3encoder.flush();   //finish writing mp3\n  \n  if (mp3buf.length > 0) {\n      mp3Data.push(mp3buf);\n  }\n  var blob = new Blob(mp3Data, {type: 'audio/mp3'});\n  var url = window.URL.createObjectURL(blob);\n  return url\n}\n\n","import React from 'react'\nimport { Button, Modal } from \"react-bootstrap\"\n\nexport default ({ show, title, message, handleClose, handleSubmit }) => {\n  return (\n    <Modal show={show} onHide={handleClose} animation={false} data-testid=\"confirmation-modal\">\n      <Modal.Header closeButton>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{message}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose} data-testid=\"cancel-button\">\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={handleSubmit} data-testid=\"ok-button\">\n          Ok\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}","import React, { PureComponent } from 'react'\nimport { Button, Table } from 'react-bootstrap'\nimport { BsTrash, BsDownload } from 'react-icons/bs'\n\nexport default class FileList extends PureComponent {\n  render() {\n    const { files, isLoading } = this.props\n    return (\n      <Table striped bordered hover size=\"sm\" responsive  data-testid=\"file-list\">\n        <thead>\n          <tr>\n            <th>File Id</th>\n            <th>File Name</th>\n            <th>File Size</th>\n            <th>Created</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {isLoading\n            ? (\n              <tr>\n                <td colSpan={5} align=\"center\">Loading...</td>\n              </tr>\n            )\n            : files.map(f => {\n              return (\n                <tr key={f.id}>\n                  <td>{f.id}</td>\n                  <td>{f.name}</td>\n                  <td>{`${(f.size / 1024).toFixed(2)} KB`}</td>\n                  <td>{new Date(f.created).toDateString()}</td>\n                  <td>\n                    <Button\n                      variant=\"success\"\n                      size=\"sm\"\n                      className='mr-2'\n                      onClick={() => this.props.onDownload(f.id)}\n                    >\n                      <BsDownload />\n                    </Button>\n                    <Button\n                      variant=\"danger\"\n                      size=\"sm\"\n                      onClick={() => this.props.onDelete(f.id)}\n                    >\n                      <BsTrash />\n                    </Button>\n                  </td>\n                </tr>\n              )\n            })\n          }\n        </tbody>\n      </Table>\n    )\n  }\n}\n\n","import React, { useCallback, useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { uploadFile } from '../../api/FileApi'\nimport { generateID, arrayBufferToBase64 } from '../../utils'\n\nimport './styles.css'\n\nconst FileUploader = () => {\n  const [isUploading, setIsUploading] = useState(false)\n\n  const readFileAsync = (file) => {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    })\n  }\n  const onDrop = useCallback((acceptedFiles) => {\n    setIsUploading(true)\n    const uploadPromises = acceptedFiles.map((file) => {\n      return readFileAsync(file)\n        .then(buffer => {\n          const fileObj = {\n            id: generateID(),\n            name: file.name,\n            size: file.size,\n            data: arrayBufferToBase64(buffer),\n            created: Date.now()\n          }\n          return uploadFile(fileObj)\n        })\n    })\n\n    Promise.all(uploadPromises)\n    .then(response => {\n      setIsUploading(false)\n    })\n    .catch(e => {\n      console.log(e)\n      setIsUploading(false)\n    })\n  }, [])\n  const {getRootProps, getInputProps, isDragActive, } = useDropzone({\n    accept: 'audio/*',\n    onDrop,\n  })\n\n  return (\n    <div  data-testid=\"file-uploader\">\n      <div {...getRootProps({\n        className: 'dropzone',\n      })}>\n        <input {...getInputProps()} data-testid=\"file-input\" />\n        \n        {isUploading\n          ? (<h4>Uploading files...</h4>)\n          : isDragActive\n            ? <p>Drop the files here ...</p>\n            : [\n              <p key=\"description\">Drag 'n' drop some files here, or click to select files</p>,\n              <em key=\"type-description\">(Only audio files will be accepted)</em>\n              ]\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default FileUploader\n","import React, { Component } from 'react'\nimport { Button, Col, Container, Row } from 'react-bootstrap'\nimport { BsArrowRepeat } from 'react-icons/bs'\nimport { deleteFile, downloadFile, getFiles } from '../api/FileApi'\nimport ConfirmationModal from '../components/ConfirmationModal'\n\nimport FileList from '../components/FileList'\nimport FileUploader from '../components/FileUploader'\n\nexport default class HomePage extends Component {\n  state = {\n    audioFiles: [],\n    isUploading: false,\n    isLoading: true,\n    isShowConfirmationModal: false,\n    currentFileId: null,\n  }\n\n  componentDidMount() {\n    this.loadFiles()\n  }\n\n  loadFiles = () => {\n    this.setState({ isLoading: true })\n    getFiles()\n      .then(files => {\n        this.setState({ audioFiles: files, isLoading: false })\n      })\n      .catch(err => {\n        console.err(err)\n      })\n  }\n\n  showModal = () => this.setState({ isShowConfirmationModal: true })\n  closeModal = () => this.setState({ isShowConfirmationModal: false })\n\n  handleUpload = file => {\n\n  }\n\n  handleDownload = fileId => {\n    downloadFile(fileId)\n  }\n\n  handleDelete = fileId => {\n    this.closeModal()\n    deleteFile(this.state.currentFileId)\n      .then(response => {\n        this.loadFiles()\n      })\n  }\n\n  render() {\n    const { audioFiles, isLoading, isShowConfirmationModal } = this.state\n\n    return (\n      <Container data-testid=\"homepage\">\n        <h1 className=\"my-5\">E-Mastered Online Audio Manager</h1>\n        <Row><Col><h2>Upload New File</h2></Col></Row>\n        <Row>\n          <Col>\n            <FileUploader />\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col sm=\"9\"><h2>Uploaded Audio files</h2></Col>\n          <Col sm=\"3\" className=\"text-right pt-2\">\n            <Button\n              variant=\"outline-secondary\"\n              size=\"sm\"\n              onClick={this.loadFiles}\n            >\n              <BsArrowRepeat />\n            </Button>\n          </Col>\n        </Row>\n        <FileList\n          isLoading={isLoading}\n          files={audioFiles}\n          onDelete={fileId => {\n            this.setState({ currentFileId: fileId })\n            this.showModal()\n          }}\n          onDownload={this.handleDownload}\n        />\n        <ConfirmationModal\n          show={isShowConfirmationModal}\n          title=\"Wait!\"\n          message=\"Are you sure to remove this file?\"\n          handleClose={this.closeModal}\n          handleSubmit={this.handleDelete}\n        />\n      </Container>\n    )\n  }\n}\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}